#!/usr/bin/env php
<?php 
namespace Staatic\Crawler\CLI;

use Staatic\Vendor\GuzzleHttp\Client;
use Staatic\Vendor\GuzzleHttp\Psr7\Uri;
use Staatic\Vendor\GuzzleHttp\Psr7\Utils;
use Staatic\Crawler\Crawler;
use Staatic\Crawler\CrawlOptions;
use Staatic\Crawler\CrawlProfile\InternalUrlsCrawlProfile;
use Staatic\Crawler\CrawlProfile\WordPressCrawlProfile;
use Staatic\Crawler\CrawlQueue\SqliteCrawlQueue;
use Staatic\Crawler\CrawlUrlProvider\EntryCrawlUrlProvider;
use Staatic\Crawler\KnownUrlsContainer\SqliteKnownUrlsContainer;
use Staatic\Crawler\Logger\StreamLogger;
$logPath = __DIR__ . '/../var/crawler.log';
$databasePath = __DIR__ . '/../var/crawler.sqlite';
\file_put_contents($logPath, '');
require __DIR__ . '/../vendor/autoload.php';
$entryUrl = $_SERVER['argv'][1] ?? null;
$destinationUrl = $_SERVER['argv'][2] ?? '/';
$crawlProfile = $_SERVER['argv'][3] ?? null;
if (!$entryUrl) {
    \printf("Missing required argument entryUrl\n");
    exit(1);
}
$entryUrl = new Uri($entryUrl);
if (!$destinationUrl) {
    \printf("Missing required argument destinationUrl\n");
    exit(1);
}
$destinationUrl = new Uri($destinationUrl);
switch ($crawlProfile) {
    case 'wordpress':
        $crawlProfile = new WordPressCrawlProfile($entryUrl, $destinationUrl);
        break;
    default:
        $crawlProfile = new InternalUrlsCrawlProfile($entryUrl, $destinationUrl);
        break;
}
// $logger = new StreamLogger(Utils::streamFor('php://stdout'));
$logger = StreamLogger::createFromFile($logPath);
$crawlQueue = new SqliteCrawlQueue($databasePath);
$crawlQueue->setLogger($logger);
$crawlQueue->createTable();
$knownUrlsContainer = new SqliteKnownUrlsContainer($databasePath);
$knownUrlsContainer->setLogger($logger);
$knownUrlsContainer->createTable();
$crawler = new Crawler(new Client(), $crawlProfile, $crawlQueue, $knownUrlsContainer, [new EntryCrawlUrlProvider($entryUrl)], new CrawlOptions());
$crawler->setLogger($logger);
// $crawler->attach(new CallbackObserver(function (UriInterface $url, UriInterface $transformedUrl) {
//     printf("Fulfilled %s\n", $url);
// }, function (UriInterface $url, UriInterface $transformedUrl) {
//     printf("Rejected %s\n", $url);
// }));
$crawler->initialize();
$numCrawlProcessed = $crawler->crawl();
\printf("Number of crawls processed: %d\n", $numCrawlProcessed);
