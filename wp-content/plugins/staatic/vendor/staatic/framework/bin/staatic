#!/usr/bin/env php
<?php 
namespace Staatic\Crawler\CLI;

use Staatic\Vendor\GuzzleHttp\Client;
use Staatic\Vendor\GuzzleHttp\Psr7\Uri;
use Staatic\Vendor\Psr\Http\Message\UriInterface;
use Staatic\Crawler\Crawler;
use Staatic\Crawler\CrawlOptions;
use Staatic\Crawler\CrawlProfile\InternalUrlsCrawlProfile;
use Staatic\Crawler\CrawlQueue\SqliteCrawlQueue;
use Staatic\Crawler\CrawlUrlProvider\EntryCrawlUrlProvider;
use Staatic\Crawler\KnownUrlsContainer\SqliteKnownUrlsContainer;
use Staatic\Crawler\Logger\StreamLogger;
use Staatic\Crawler\Observer\CallbackObserver;
use Staatic\Framework\Build;
use Staatic\Framework\BuildRepository\SqliteBuildRepository;
use Staatic\Framework\Deployment;
use Staatic\Framework\DeploymentRepository\SqliteDeploymentRepository;
use Staatic\Framework\DeployStrategy\AwsDeployStrategy;
use Staatic\Framework\DeployStrategy\FilesystemDeployStrategy;
use Staatic\Framework\DeployStrategy\NetlifyDeployStrategy;
use Staatic\Framework\ResourceRepository\FilesystemResourceRepository;
use Staatic\Framework\ResourceRepository\InMemoryResourceRepository;
use Staatic\Framework\ResultRepository\SqliteResultRepository;
use Staatic\Framework\StaticDeployer;
use Staatic\Framework\StaticGenerator;
$logPath = __DIR__ . '/../var/staatic.log';
$databasePath = __DIR__ . '/../var/staatic.sqlite';
\file_put_contents($logPath, '');
//!
\file_put_contents($databasePath, '');
//!
require __DIR__ . '/../vendor/autoload.php';
$entryUrl = $_SERVER['argv'][1] ?? null;
$destinationUrl = $_SERVER['argv'][2] ?? '/';
$targetDir = $_SERVER['argv'][3] ?? __DIR__ . '/../var/deploy/';
$resourceDir = $_SERVER['argv'][4] ?? null;
if (!$entryUrl) {
    \printf("Missing required argument entryUrl\n");
    exit(1);
}
$entryUrl = new Uri($entryUrl);
if (!$destinationUrl) {
    \printf("Missing required argument destinationUrl\n");
    exit(1);
}
$destinationUrl = new Uri($destinationUrl);
if (!$targetDir) {
    \printf("Missing required argument targetDir\n");
    exit(1);
}
if (!($targetDir = \realpath($targetDir))) {
    \printf("Target directory does not exist in %s\n", $resourceDir);
    exit(1);
}
if ($resourceDir && !\is_dir($resourceDir)) {
    \printf("Resource directory does not exist in %s\n", $resourceDir);
    exit(1);
}
$crawlProfile = new InternalUrlsCrawlProfile($entryUrl, $destinationUrl);
// $logger = new StreamLogger(Utils::streamFor('php://stdout'));
$logger = StreamLogger::createFromFile($logPath);
// ***** Setup Crawler
$crawlQueue = new SqliteCrawlQueue($databasePath);
$crawlQueue->setLogger($logger);
$crawlQueue->createTable();
$knownUrlsContainer = new SqliteKnownUrlsContainer($databasePath);
$knownUrlsContainer->setLogger($logger);
$knownUrlsContainer->createTable();
$crawlUrlProviders = [new EntryCrawlUrlProvider($entryUrl)];
$crawler = new Crawler(new Client(), $crawlProfile, $crawlQueue, $knownUrlsContainer, $crawlUrlProviders, new CrawlOptions());
$crawler->setLogger($logger);
$crawler->attach(new CallbackObserver(function (UriInterface $url, UriInterface $transformedUrl) {
    \printf("- \33[32mFulfilled %s\33[0m\n", $url);
}, function (UriInterface $url, UriInterface $transformedUrl) {
    \printf("- \33[31mRejected %s\33[0m\n", $url);
}));
// $crawler->initialize();
// $numCrawlProcessed = $crawler->crawl();
// printf("Number of crawls processed: %d\n", $numCrawlProcessed);
// ***** Setup Generator
$buildRepository = new SqliteBuildRepository($databasePath);
$buildRepository->setLogger($logger);
$buildRepository->createTable();
$resultRepository = new SqliteResultRepository($databasePath);
$resultRepository->setLogger($logger);
$resultRepository->createTables();
$resourceRepository = $resourceDir ? new FilesystemResourceRepository($resourceDir) : new InMemoryResourceRepository();
$resourceRepository->setLogger($logger);
$transformers = [];
$postProcessors = [];
$generator = new StaticGenerator($crawler, $buildRepository, $resultRepository, $resourceRepository, $transformers, $postProcessors, $logger);
// Prepare Build
$build = new Build($buildRepository->nextId(), $entryUrl, $destinationUrl);
$buildRepository->add($build);
// Execute Generator
\printf("Initializing crawler...\n");
$numEnqueued = $generator->initializeCrawler($build);
\printf("Enqueued: %d crawl urls\n", $numEnqueued);
\printf("Crawling...\n");
$finished = $generator->crawl($build);
if (!$finished) {
    \printf("\33[31mCrawl did not finish!\33[0m\n", $url);
    exit(1);
}
\printf("Crawling finished\n");
\printf("Finishing...\n");
$generator->finish($build);
\printf("Finished\n");
// ***** Setup Deployer
$deploymentRepository = new SqliteDeploymentRepository($databasePath);
$deploymentRepository->setLogger($logger);
$deploymentRepository->createTable();
$filesystemDeployStrategy = new FilesystemDeployStrategy($resourceRepository, ['targetDirectory' => $targetDir]);
$filesystemDeployStrategy->setLogger($logger);
$awsDeployStrategy = new AwsDeployStrategy($resultRepository, $resourceRepository, [
    'region' => 'eu-central-1',
    'profile' => null,
    'accessKeyId' => 'AKIAI6WJO4MDHWP4BF5A',
    'secretAccessKey' => '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',
    // 'concurrency' => 1,
    'bucket' => 'static123test',
    'prefix' => 'staatic/',
]);
$awsDeployStrategy->setLogger($logger);
$netlifyDeployStrategy = new NetlifyDeployStrategy($resultRepository, $resourceRepository, new Client(), ['accessToken' => 'JPKoAa5ZVuIAvxvlOiobFJI_vgnIzYLRphZyJSpKt30', 'siteId' => '2066484d-5824-4ec9-befc-028233a60f40']);
$netlifyDeployStrategy->setLogger($logger);
$deployers = ['filesystem' => new StaticDeployer($deploymentRepository, $resultRepository, $filesystemDeployStrategy, $logger)];
// ***** Testing
// $resultRepository->mergeBuildResults(
//     $build->id(),
//     $buildRepository->nextId(),
// );
// var_dump($buildRepository->nextId()); exit;
// ***** /Testing
foreach ($deployers as $deployerLabel => $deployer) {
    \printf("\n=====================\n%s\n=====================\n\n", $deployerLabel);
    // Prepare Deployment
    $deployment = new Deployment($deploymentRepository->nextId(), $build->id());
    $deploymentRepository->add($deployment);
    // Execute Deployer
    \printf("Initiating deployment...\n");
    $deployer->initiateDeployment($deployment);
    \printf("Initiating deployment finished\n");
    \printf("Processing results...\n");
    $isFinished = $deployer->processResults($deployment);
    \printf("Processed results\n");
    \printf("Finishing deployment...\n");
    $deployer->finishDeployment($deployment);
    \printf("Finished deployment\n");
}
// ...
